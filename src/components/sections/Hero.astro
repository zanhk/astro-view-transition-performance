---
import Container from "@/components/primitives/Container.astro";
import type { Props as ButtonProps } from "@/components/primitives/Link.astro";
import Link from "@/components/primitives/Link.astro";
import Title from "@/components/primitives/Title.astro";

type Button = ButtonProps & {
	title: string;
};

interface Props {
	title: string;
	subtitle: string;
	reviews: {
		averageRating: number;
		count: number;
		link?: string;
	}[];
	location: {
		address: string;
		link: string;
	}[];
	buttons?: Button[];
	imagePath: string;
}

const defaultButtons = [
	{
		title: "Scopri di pi√π",
		href: "#",
		style: "outline",
	},
	{
		title: "Prenota una visita",
		href: "#",
		style: "button",
		icon: "arrow-right",
	},
];

const {
	title = "Title",
	subtitle = "Subtitle",
	reviews = [],
	location = [],
	buttons = defaultButtons,
} = Astro.props;
---

<section id="hero" class="relative">
	<div class="absolute top-0 -z-10 h-full w-full"></div>
	<div class="embed is-bottom w-embed">
		<svg
			viewBox="0 0 1070 115"
			fill="none"
			xmlns="http://www.w3.org/2000/svg"
		>
			<path
				wb-element="path-to-animate"
				d="M0 0V115H1070V0C1070 0 1059.26 22.3611 691.847 37.2685C324.438 52.1759 0 0 0 0Z"
				wb-final-path="M 0 0 V 115 H 1070 V 1 C 974 3 806 4 533 2 C 314 3 45 4 0 0 Z"
				fill="white"
			>
			</path>
		</svg>
	</div>
	<Container tag="div" class="mx-0">
		<div class="flex">
			<div
				class="relative py-40 lg:py-64 lg:pb-[22rem] z-10 flex-1 flex max-w-xl flex-col justify-center gap-5 lg:mx-0 lg:max-w-2xl"
			>
				<Title
					data-hero-text-reveal
					class="hero-title overflow-hidden font-semibold font-display"
					level={1}>{title}</Title
				>
				<Title
					data-hero-text-reveal
					class="hero-subtitle overflow-hidden text-zinc-600"
					level={5}
					tag={2}>{subtitle}</Title
				>
				{
					location && location.address && (
						<Link
							data-hero-reveal
							href={location.link}
							target="_blank"
							class="inline-flex items-center gap-2"
						>
							<span>{location.address}</span>
						</Link>
					)
				}
				<div class="items-center flex flex-wrap gap-4 pt-8">
					{
						buttons.map(({ title, href, style, icon }) => (
							<Link
								data-hero-reveal
								href={href}
								size="lg"
								style={
									style as
										| "button"
										| "primary"
										| "outline"
										| undefined
								}
								icon={icon}
							>
								{title}
							</Link>
						))
					}
				</div>
			</div>
			<div class="relative bottom-0 lg:ml-0 z-10"></div>
		</div>
	</Container>
</section>

<style>
	[data-hero-reveal] {
		opacity: 0;
	}
	.embed.is-bottom {
		left: 0%;
		top: auto;
		right: 0%;
		bottom: 0%;
		width: 100%;
		margin-bottom: -6px;
	}
	.embed {
		position: absolute;
		left: 0%;
		top: 0%;
		right: 0%;
		bottom: auto;
		z-index: 2;
		width: 100%;
	}
</style>

<style is:global>
	[data-hero-text-reveal] {
		opacity: 0;
	}
	[data-hero-text-reveal] > div {
		position: relative;
		margin: 0;
	}
	.split-parent {
		overflow: hidden;
	}
	.split-child {
		display: inline-block;
	}
</style>

<script>
	import gsap from "gsap";

	document.addEventListener(
		"astro:page-load",
		() => {
			if (document.getElementById("hero") !== null) {
				// Text + buttons reveal
				const childSplit = new SplitText("[data-hero-text-reveal]", {
					type: "lines",
					linesClass: "split-child",
				});
				const parentSplit = new SplitText("[data-hero-text-reveal]", {
					// type: "lines",
					linesClass: "split-parent",
				});

				gsap.timeline()
					.set("[data-hero-text-reveal]", { opacity: 1 })
					.from(childSplit.lines, {
						yPercent: 300,
						skewY: 7,
						stagger: 0.2,
					})
					.to(
						"[data-hero-reveal]",
						{
							opacity: 1,
							stagger: 0.1,
						},
						"<=",
					);

				const pathsToAnimate = document.querySelectorAll(
					'[wb-element="path-to-animate"]',
				);

				pathsToAnimate.forEach((path) => {
					const finalPath = path.getAttribute("wb-final-path");

					gsap.timeline({
						scrollTrigger: {
							trigger: path,
							start: "top bottom",
							end: "bottom top",
							scrub: 1,
						},
					}).to(path, {
						attr: { d: finalPath || "" },
						ease: "none",
					});
				});
			}
		},
		{ once: false },
	);
</script>
