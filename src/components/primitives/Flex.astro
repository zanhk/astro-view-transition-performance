---
type TailwindGap =
	| 0
	| 0.5
	| 1
	| 1.5
	| 2
	| 2.5
	| 3
	| 3.5
	| 4
	| 5
	| 6
	| 7
	| 8
	| 9
	| 10
	| 11
	| 12
	| 14
	| 16
	| 20
	| 24
	| 28
	| 32
	| 36
	| 40
	| 44
	| 48
	| 52
	| 56
	| 60
	| 64
	| 72
	| 80
	| 96;

interface Props {
	direction?: "ltr" | "rtl" | "ttb" | "btt";
	verticalAlign?: "top" | "middle" | "bottom" | "stretch" | "spaceAround" | "spaceBetween";
	horizontalAlign?: "left" | "center" | "right" | "spaceAround" | "spaceBetween" | "spaceEvenly";
	itemsAlignment?: "start" | "center" | "end" | "stretch" | "baseline";
	gap: TailwindGap;
	wrap?: boolean;
	class?: string;
	[x: string]: any;
}

const {
	direction = "ltr",
	wrap = false,
	verticalAlign = "top",
	horizontalAlign = "left",
	itemsAlignment = "start",
	class: className,
	...rest
} = Astro.props as Props;

const directionMap = {
	ltr: "flex-row",
	rtl: "flex-row-reverse",
	ttb: "flex-col",
	btt: "flex-col-reverse",
};

const verticalAlignMap = {
	top: "items-start",
	middle: "items-center",
	bottom: "items-end",
	stretch: "items-stretch",
	spaceAround: "items-around",
	spaceBetween: "items-between",
};

const horizontalAlignMap = {
	left: "justify-start",
	center: "justify-center",
	right: "justify-end",
	spaceAround: "justify-around",
	spaceBetween: "justify-between",
	spaceEvenly: "justify-evenly",
};

const itemsAlignmentMap = {
	start: "align-start",
	center: "align-center",
	end: "align-end",
	stretch: "align-stretch",
	baseline: "align-baseline",
};
---

<div class:list={["flex", directionMap[direction], verticalAlignMap[verticalAlign], horizontalAlignMap[horizontalAlign], itemsAlignmentMap[itemsAlignment]]}>
	<slot />
</div>
